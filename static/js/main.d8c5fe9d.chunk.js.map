{"version":3,"sources":["store/initialState.js","store/actions.js","store/reducer.js","store/store.js","components/Header/Header.js","components/Main/Menu/Menu.js","components/Main/Templates/Buttons/Button.js","components/Main/Templates/EmailTemplate/EmailTemplate.js","components/Main/Templates/InputsTemplate/InputsTemplate.js","components/Main/Templates/Templates.js","components/Main/Feedback/Feedback.js","components/Main/Main.js","App.js","index.js"],"names":["state","menuList","id","title","bodyEmail","name","dirtyText","cleanText","pageActive","idActivePage","placeholders","text","aboutSending","isSend","status","CLICK_ON_MENU","BACK","NEXT","ADD_PLACEHOLDER","CLEAR_PLACEHOLDERS","FILL_PLACEHOLDER","FILL_EMAIL_BODY","FILL_CLEAN_EMAIL_TEXT","CREATE_EMAIL","CLEAR","SEND_EMAIL","SENDING_STATUS","actions","value","type","createCleanEmail","allPlaceholders","match","length","forEach","item","replace","find","placeholder","store","createStore","action","idMax","map","initialState","Header","className","role","href","Menu","useSelector","dispatch","useDispatch","onClick","event","currentTarget","classnames","Button","buttonName","isChangeEmailBody","setIsChangeEmailBody","url","subject","emailToSend","indexOf","push","axios","post","then","response","catch","error","console","log","window","alert","userPressed","target","innerText","EmailTemplate","useState","variable","setVariable","dirtyEmail","cleanEmail","describeVariable","htmlFor","onChange","char","charAt","isLetter","toUpperCase","toLowerCase","inputtingEmailBody","defaultValue","selectedId","InputsTemplate","pressButton","data","Templates","Feedback","Main","useEffect","timer","setTimeout","clearTimeout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8c5fe9d.chunk.js","sourcesContent":["export let state = {\n  menuList: [\n    {\n      id: 1,\n      title: 'Compose Email Template',\n    },\n    {\n      id: 2,\n      title: 'Set Values',\n    },\n    {\n      id: 3,\n      title: 'Preview & Send',\n    },\n  ],\n  bodyEmail: {\n    name: 'Body',\n    dirtyText: '',\n    cleanText: '',\n  },\n  pageActive: { idActivePage: 1 },\n  placeholders: [\n    {\n      id: 1,\n      title: 'Recipients',\n      name: '{recipient}',\n      text: '',\n    },\n    {\n      id: 2,\n      title: 'Subject',\n      name: '{subject}',\n      text: '',\n    },\n  ],\n  aboutSending: {\n    isSend: false,\n    status: false,\n  },\n};\n","export const CLICK_ON_MENU = 'CLICK_ON_MENU';\nexport const BACK = 'BACK';\nexport const NEXT = 'NEXT';\nexport const ADD_PLACEHOLDER = 'ADD_PLACEHOLDER';\nexport const CLEAR_PLACEHOLDERS = 'CLEAR_PLACEHOLDERS';\nexport const FILL_PLACEHOLDER = 'FILL_PLACEHOLDER';\nexport const FILL_EMAIL_BODY = 'FILL_BODY_EMAIL';\nexport const FILL_CLEAN_EMAIL_TEXT = 'FILL_CLEAN_EMAIL_TEXT';\nexport const CREATE_EMAIL = 'CREATE_EMAIL';\nexport const CLEAR = 'CLEAR';\nexport const SEND_EMAIL = 'SEND_EMAIL';\nexport const SENDING_STATUS = 'SENDING_STATUS';\n\nexport const actions = {\n  clickOnMenu: (value) => ({ type: CLICK_ON_MENU, value }),\n  back: () => ({ type: BACK }),\n  next: () => ({ type: NEXT }),\n  addPlaceholder: (value) => ({ type: ADD_PLACEHOLDER, value }),\n  clearPlaceholders: () => ({ type: CLEAR_PLACEHOLDERS }),\n  fillPlaceholder: (id, value) => ({ type: FILL_PLACEHOLDER, id, value }),\n  fillEmailBody: (value) => ({ type: FILL_EMAIL_BODY, value }),\n  fillCleanEmailText: () => ({ type: FILL_CLEAN_EMAIL_TEXT }),\n  createEmail: () => ({ type: CREATE_EMAIL }),\n  clear: () => ({ type: CLEAR }),\n  sendEmail: (value) => ({ type: SEND_EMAIL, value }),\n  sendingStatus: (value) => ({ type: SENDING_STATUS, value }),\n};\n","import { state as initialState } from './initialState';\nimport {\n  FILL_EMAIL_BODY, FILL_CLEAN_EMAIL_TEXT, CREATE_EMAIL,\n  ADD_PLACEHOLDER, CLEAR_PLACEHOLDERS, FILL_PLACEHOLDER,\n  CLICK_ON_MENU, BACK, NEXT,\n  CLEAR, SEND_EMAIL, SENDING_STATUS,\n} from './actions';\n\nconst createCleanEmail = (text, placeholders) => {\n  let allPlaceholders = !text ? [] : text.match(/{\\w+}/g);\n\n  if (placeholders.length > 2) {\n    allPlaceholders.forEach(item => {\n      text = text.replace(\n        item, placeholders.find(placeholder => placeholder.name === item).text\n      )\n    });\n  } \n  return text;\n};\n\nexport const reducer = (state = {}, action) => {\n  const idMax = state.placeholders.length;\n\n  switch (action.type) {\n    case FILL_EMAIL_BODY:\n      return {\n        ...state,\n        bodyEmail: {\n          ...state.bodyEmail,\n          dirtyText: action.value,\n          cleanText: action.value,\n        },\n      };\n\n    case FILL_CLEAN_EMAIL_TEXT:\n      return {\n        ...state,\n        bodyEmail: {\n          ...state.bodyEmail,\n          cleanText: state.bodyEmail.dirtyText,\n        },\n      };\n\n    case CREATE_EMAIL:\n      return {\n        ...state,\n        bodyEmail: {\n          ...state.bodyEmail,\n          cleanText: createCleanEmail(state.bodyEmail.cleanText, state.placeholders),\n        },\n      };\n\n    case ADD_PLACEHOLDER:\n      return {\n        ...state,\n        placeholders: [\n          ...state.placeholders,\n          {\n            id: idMax + 1,\n            title: '',\n            name: action.value,\n            text: '',\n          },\n        ],\n      };\n    \n    case CLEAR_PLACEHOLDERS:\n      return {\n        ...state,\n        placeholders: [\n          state.placeholders[0],\n          state.placeholders[1],\n        ],\n      };\n\n    case FILL_PLACEHOLDER:\n      return {\n        ...state,\n        placeholders:\n          state.placeholders.map(placeholder => {\n            if (placeholder.id === action.id) {\n              return {\n                ...placeholder,\n                text: action.value,\n              };\n            }\n            return { ...placeholder };\n          }),\n      };\n\n    case CLICK_ON_MENU:\n      return {\n        ...state,\n        pageActive: { idActivePage: action.value },\n      };\n\n    case BACK:\n      return {\n        ...state,\n        pageActive: { idActivePage: --state.pageActive.idActivePage },\n      };\n\n    case NEXT:\n      return {\n        ...state,\n        pageActive: { idActivePage: ++state.pageActive.idActivePage },\n      };\n\n    case CLEAR:\n      return initialState;\n\n    case SEND_EMAIL:\n      return {\n        ...state,\n        aboutSending: {\n          ...state.aboutSending,\n          isSend: action.value,\n        },\n      };\n\n    case SENDING_STATUS:\n      return {\n        ...state,\n        aboutSending: {\n          ...state.aboutSending,\n          status: action.value,\n        },\n      };\n\n    default:\n      return state;\n  };\n};\n","import { createStore } from 'redux';\nimport { state } from './initialState';\nimport { reducer } from './reducer';\n\nexport const store = createStore(reducer, state);\n","import './Header.scss';\n\nexport function Header() {\n  return (\n    <>\n      <header className=\"header\">\n\n      <section className=\"header__logo\" role=\"navigation\">\n        <a className=\"header__link\" href=\"#home_page\">\n            <div className=\"header__logo-part1\" />\n            <div className=\"header__logo-part2\" />\n        </a>\n        \n        <h1 className=\"header__title\">Email Templater</h1>\n      </section>\n\n      </header>\n    </>\n  );\n}\n","import classnames from 'classnames';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actions } from '../../../store/actions';\n\nimport './Menu.scss';\n\nexport function Menu() {\n  const idActivePage = useSelector((state) => state.pageActive.idActivePage);\n  const menuList = useSelector((state) => state.menuList);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <section className=\"menu\">\n\n        <ul className=\"menu__list\">\n\n          {\n            menuList.map(item => (\n              <li\n                onClick={(event) => (\n                  dispatch(actions.clickOnMenu(+event.currentTarget.id))\n                )}\n                className=\"menu__item\"\n                id={item.id}\n                key={item.id}\n              >\n\n                <div\n                  className={\n                    classnames({\n                      'menu__counter': true,\n                      'menu__counter-active': item.id === idActivePage,\n                    })\n                  }\n                >\n                  <span className=\"menu__counter-text\">{item.id}</span>\n                </div>\n\n                <p\n                  className={\n                    classnames({\n                      'menu__item-title': true,\n                      'menu__item-active': item.id === idActivePage,\n                    })\n                  }\n                >\n                  {item.title}\n                </p>\n\n              </li>\n            ))\n          }\n\n        </ul>\n\n      </section>\n    </>\n  );\n}\n","import axios from 'axios';\n\nimport classnames from 'classnames';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from '../../../../store/actions';\n\nimport './Button.scss';\n\nexport function Button({\n  buttonName,\n  isChangeEmailBody,\n  setIsChangeEmailBody,\n}) {\n  const dispatch = useDispatch();\n  const dirtyText = useSelector(state => state.bodyEmail.dirtyText);\n\n  const url = useSelector(state => state.placeholders[0].text);\n  const subject = useSelector(state => state.placeholders[1].text);\n  const emailToSend = useSelector(state => state.bodyEmail.cleanText);\n\n  const userPressed = (name) => {\n    name === 'BACK' && dispatch(actions.back());\n\n    if (name !== 'BACK' && name !== 'SEND') {\n      dispatch(actions.next());\n      dispatch(actions.fillCleanEmailText());\n      dispatch(actions.createEmail());\n    }\n\n    if (name === 'SET VARIABLES' && isChangeEmailBody) {\n      let placeholders = [];\n      if (dirtyText.indexOf('{') >= 0 && dirtyText.indexOf('}') >= 0) {\n        dirtyText\n        .match(/{\\w+}/g)\n        .forEach(item => {\n          if (placeholders.indexOf(item) < 0) {\n            placeholders.push(item);\n          }\n        });\n\n        placeholders.forEach(item => {\n          item !== '{subject}' && dispatch(actions.addPlaceholder(item))\n        });\n      }\n\n      setIsChangeEmailBody(false);\n    }\n\n    if (name === 'SEND') {\n      if (url && subject) {\n        axios.post('https://mock.at.leanylabs.com/email', {\n          'to': \"hr@leanylabs.com\",\n          'subject': subject,\n          'body': emailToSend,\n        })\n        .then(function (response) {\n            dispatch(actions.sendingStatus(true));\n            if (response.status >= 200 && response.status <= 300) {\n            dispatch(actions.sendEmail(true));\n            }\n        })\n        .catch(function (error) { \n          console.log(error);\n          dispatch(actions.sendingStatus(false));\n          dispatch(actions.sendEmail(true));\n        });\n      } else {\n        window.alert('Please, fill {Recipient} and {Subject}!')\n      }\n    }\n  };\n\n  return (\n    <>\n      <button\n          onClick={(event) => userPressed(event.target.innerText)}\n          className={\n            classnames({\n              'button': true,\n              'button--gray': buttonName === 'BACK'\n            })\n          }\n          type=\"button\"\n        >\n          {buttonName}\n        </button>\n    </>\n  );\n}\n","import { useState } from 'react';\nimport classnames from 'classnames';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from '../../../../store/actions';\n\nimport { Button } from '../Buttons/Button';\n\nimport './EmailTemplate.scss';\n\nexport function EmailTemplate() {\n  const [isChangeEmailBody, setIsChangeEmailBody] = useState(false);\n  const [variable, setVariable] = useState('');\n  const idActivePage = useSelector((state) => state.pageActive.idActivePage);\n  const dirtyEmail = useSelector((state) => state.bodyEmail.dirtyText);\n  const cleanEmail = useSelector((state) => state.bodyEmail.cleanText);\n\n  const dispatch = useDispatch();\n\n  const inputtingEmailBody = (text) => {\n    setIsChangeEmailBody(true);\n    dispatch(actions.clearPlaceholders());\n\n    const char = text.charAt(text.length-1);\n    const isLetter = (char.toUpperCase() !== char.toLowerCase());\n\n    !variable && dispatch(actions.fillEmailBody(text));\n\n    if (char === '{') {\n      setVariable(char);\n    }\n\n    if (char === '}' && variable.length > 1) {\n      dispatch(actions.fillEmailBody(text));\n      setVariable('');\n    }\n\n    if ((variable && isLetter) || char === '{') {\n      setIsChangeEmailBody(false);\n      dispatch(actions.fillEmailBody(text));\n      setVariable(variable + char);\n    }\n  };\n\n  const describeVariable = (event) => {\n    dispatch(\n      actions.fillPlaceholder((+event.target.id), event.target.value)\n    );\n  };\n\n  return (\n    <>\n      <div\n        className={\n          classnames({\n            'composeEmail': idActivePage === 1,\n            'composeEmail-prev': idActivePage === 3,\n          })\n        }\n      >\n\n        <h2\n          className={\n            classnames({\n              'composeEmail__title-email': idActivePage === 1,\n              'composeEmail__title-prev': idActivePage === 3,\n            })\n          }\n        >\n          {\n            idActivePage === 1\n              ? 'Compose Email Template'\n              : 'Preview and Send'\n          }\n        </h2>\n\n        <form className=\"composeEmail__form\">\n          <label\n            className=\"composeEmail__label composeEmail__label-recipients\"\n            htmlFor={useSelector((state) => state.placeholders[0].id)}\n          >\n            {useSelector((state) => state.placeholders[0].title)}\n          </label>\n\n          <input\n            onChange={(event) => describeVariable(event)}\n            value={useSelector((state) => state.placeholders[0].text)}\n            placeholder={useSelector((state) => state.placeholders[0].name)}\n            className=\"composeEmail__input composeEmail__input-recipients\"\n            id={useSelector((state) => state.placeholders[0].id)}\n          />\n\n          <label\n            className=\"composeEmail__label composeEmail__label-subject\"\n            htmlFor={useSelector((state) => state.placeholders[1].id)}\n          >\n            {useSelector((state) => state.placeholders[1].title)}\n          </label>\n\n          <input\n            onChange={(event) => describeVariable(event)}\n            value={useSelector((state) => state.placeholders[1].text)}\n            placeholder={useSelector((state) => state.placeholders[1].name)}\n            className=\"composeEmail__input composeEmail__input-subject\"\n            id={useSelector((state) => state.placeholders[1].id)}\n          />\n\n          <label\n            className=\"composeEmail__label composeEmail__label-body\"\n            htmlFor=\"body\"\n          >\n            {useSelector((state) => state.bodyEmail.name)}\n          </label>\n\n          {\n            idActivePage === 1\n              ?\n                <textarea\n                  onChange={(event) => inputtingEmailBody(event.target.value)}\n                  placeholder='{enter your email template}'\n                  value={ idActivePage === 1 ? dirtyEmail : cleanEmail }\n                  className=\"composeEmail__input composeEmail__input-body\"\n                  id=\"body\"\n                />\n              :\n                <>\n                  <textarea\n                    defaultValue={ idActivePage === 1 ? dirtyEmail : cleanEmail }\n                    className=\"composeEmail__input composeEmail__input-body\"\n                    id=\"body\"\n                  />\n                  <span className=\"composeEmail__warning\">\n                    This lield you can correct only on *Compose Email Template* page!\n                  </span>\n                </>\n          }\n          \n\n          <div role=\"button\"\n            className={\n              classnames({\n                'button__wrap': true,\n                'button__wrap-2': idActivePage === 3,\n              })\n            }\n          >\n            {\n              idActivePage === 1\n                ?\n                  <Button\n                    buttonName={'SET VARIABLES'}\n                    selectedId={idActivePage}\n                    isChangeEmailBody={isChangeEmailBody}\n                    setIsChangeEmailBody={setIsChangeEmailBody}\n                  />\n                :\n                  <>\n                    <Button\n                      buttonName={'BACK'}\n                      selectedId={idActivePage}\n                    />\n                    <Button\n                      buttonName={'SEND'}\n                      selectedId={idActivePage}\n                    />\n                  </>\n            }\n          </div>\n\n        </form>\n\n      </div>\n    </>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { actions } from '../../../../store/actions';\n\nimport { Button } from '../Buttons/Button';\nimport './InputsTemplate.scss';\n\nexport function InputsTemplate({\n  selectedId,\n  pressButton,\n}) {\n  const placeholders = useSelector((state) => state.placeholders);\n  const dispatch = useDispatch();\n\n  const describeVariable = (event) => {\n    dispatch(\n      actions.fillPlaceholder((+event.target.id), event.target.value)\n    );\n  };\n\n  return (\n    <>\n      <section className=\"inputsTemplate\">\n        <h2 className=\"inputsTemplate__title\">\n          Set Values\n        </h2>\n\n        <div className=\"inputsTemplate--wrap\">\n          {\n            placeholders.map(item => (\n              <div key={item.id}>\n                <label\n                  className=\"inputsTemplate__label\"\n                  htmlFor={item.id}\n                >\n                  {item.name}\n                </label>\n                <input\n                  onChange={(event) => describeVariable(event)}\n                  value={item.text}\n                  className=\"inputsTemplate__input\"\n                  data={item.name}\n                  id={item.id}\n                />\n              </div>\n            ))\n          }\n        </div>\n\n        <div role=\"button\"\n          className=\"button__wrap button__wrap-2\"\n        >\n          <Button\n            buttonName={'BACK'}\n            selectedId={selectedId}\n            pressButton={pressButton}\n          />\n          <Button\n            buttonName={'NEXT'}\n            selectedId={selectedId}\n            pressButton={pressButton}\n          />\n        </div>\n      </section>\n    </>\n  );\n}\n","\nimport { EmailTemplate } from './EmailTemplate/EmailTemplate.js';\nimport { InputsTemplate } from './InputsTemplate/InputsTemplate.js';\n\nimport { useSelector } from 'react-redux';\n\nimport './Templates.scss';\n\nexport function Templates() {\n  const idActivePage = useSelector((state) => state.pageActive.idActivePage);\n\n  return (\n    <>\n      <div className=\"templates\">\n        {\n          idActivePage !== 2\n          &&\n          <EmailTemplate />\n        }\n\n        {\n          idActivePage === 2\n          &&\n          <InputsTemplate\n            idActivePage={idActivePage}\n          />\n        }\n\n      </div>\n    </>\n  );\n}\n","import classnames from 'classnames';\n\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../../../store/actions';\n\nimport './Feedback.scss';\n\nexport function Feedback({\n  isSend,\n  status,\n}) {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <div className={\n        classnames({\n          'feedback': true,\n          'feedback--visible': isSend,\n        })\n      }\n      >\n\n        <div\n          className={\n            classnames({\n              'feedback__status': true,\n              'feedback__status--good': status,\n              'feedback__status--bed': !status,\n            })\n          }\n        />\n        <p className=\"feedback__text\">\n          {\n            status\n              ? 'Email sent successfully!'\n              : 'Failed to send email!'\n          }\n        </p>\n        <div\n          onClick={() => dispatch(actions.sendEmail(false))}\n          className=\"feedback__cross\"\n        />\n\n      </div>\n    </>\n  );\n}\n","\nimport './Main.scss';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from '../../store/actions';\n\nimport { Menu } from './Menu/Menu';\nimport { Templates } from './Templates/Templates';\nimport { Feedback } from './Feedback/Feedback';\nimport { useEffect } from 'react';\n\nexport function Main() {\n  const dispatch = useDispatch();\n  const isSend = useSelector(state => state.aboutSending.isSend);\n  const status = useSelector(state => state.aboutSending.status);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      dispatch(actions.sendEmail(false));\n    }, 5000);\n    return () => clearTimeout(timer);\n  }, [isSend]);\n\n  return (\n    <>\n      <main className=\"main\">\n\n        <Menu />\n\n        <Templates />\n\n        <Feedback\n          isSend={isSend}\n          status={status}\n        />\n\n      </main>\n    </>\n  );\n}\n","import './App.scss';\n\nimport { Header } from './components/Header/Header';\nimport { Main } from './components/Main/Main';\n\nfunction App() {\n\n  return (\n    <div className=\"App\" id=\"home_page\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}